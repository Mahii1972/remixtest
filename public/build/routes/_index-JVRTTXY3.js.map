{
  "version": 3,
  "sources": ["../../../app/routes/_index.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_index.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_index.jsx\");\n  import.meta.hot.lastModified = \"1713256567913.255\";\n}\n// REMIX HMR END\n\nimport { useState } from 'react';\nimport { Form, useActionData } from '@remix-run/react';\nimport { uploadFileToS3 } from '../utils/s3-utils';\nexport async function action({\n  request\n}) {\n  const form = await request.formData();\n  const file = form.get('pdf');\n  const userId = 'temp'; // Replace with the actual user ID\n  const projectId = 'project456'; // Replace with the actual project ID\n\n  console.log('Received file:', file);\n  try {\n    const arrayBuffer = await file.arrayBuffer();\n    const buffer = Buffer.from(arrayBuffer);\n    const filePath = `${userId}/${projectId}_${file.name}`; // Include projectId in the filename\n    const objectUrl = await uploadFileToS3(buffer, filePath);\n    console.log('Object URL:', objectUrl);\n    return {\n      objectUrl\n    };\n  } catch (error) {\n    console.error('Error uploading file:', error);\n    return {\n      error: 'Failed to upload file'\n    };\n  }\n}\nexport default function UploadPDF() {\n  _s();\n  const actionData = useActionData();\n  const [uploading, setUploading] = useState(false);\n  return <div>\n      <Form method=\"post\" encType=\"multipart/form-data\" onSubmit={() => {\n      setUploading(true);\n      console.log('Form submitted');\n    }}>\n        <input type=\"file\" name=\"pdf\" accept=\".pdf\" />\n        <button type=\"submit\" disabled={uploading}>\n          {uploading ? 'Uploading...' : 'Upload'}\n        </button>\n      </Form>\n      {actionData?.objectUrl && <div>\n          <p>Object URL: {actionData.objectUrl}</p>\n        </div>}\n      {actionData?.error && <div>\n          <p>Error: {actionData.error}</p>\n        </div>}\n    </div>;\n}\n_s(UploadPDF, \"VHMWpE4eVbVBjjeijSA4+hg1Ij8=\", false, function () {\n  return [useActionData];\n});\n_c = UploadPDF;\nvar _c;\n$RefreshReg$(_c, \"UploadPDF\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAqBA,mBAAyB;AAqCjB;AAzDR,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,4BAA8B,EAAE;AAAA,EACzE;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAuB;AACvB,cAAY,IAAI,eAAe;AACjC;AA+Be,SAAR,YAA6B;AAClC,KAAG;AACH,QAAM,aAAa,cAAc;AACjC,QAAM,CAAC,WAAW,YAAY,QAAI,uBAAS,KAAK;AAChD,SAAO,mDAAC,SACJ;AAAA,uDAAC,QAAK,QAAO,QAAO,SAAQ,uBAAsB,UAAU,MAAM;AAClE,mBAAa,IAAI;AACjB,cAAQ,IAAI,gBAAgB;AAAA,IAC9B,GACI;AAAA,yDAAC,WAAM,MAAK,QAAO,MAAK,OAAM,QAAO,UAArC;AAAA;AAAA;AAAA;AAAA,aAA4C;AAAA,MAC5C,mDAAC,YAAO,MAAK,UAAS,UAAU,WAC7B,sBAAY,iBAAiB,YADhC;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAPF;AAAA;AAAA;AAAA;AAAA,WAQA;AAAA,IACC,YAAY,aAAa,mDAAC,SACvB,6DAAC,OAAE;AAAA;AAAA,MAAa,WAAW;AAAA,SAA3B;AAAA;AAAA;AAAA;AAAA,WAAqC,KADf;AAAA;AAAA;AAAA;AAAA,WAExB;AAAA,IACD,YAAY,SAAS,mDAAC,SACnB,6DAAC,OAAE;AAAA;AAAA,MAAQ,WAAW;AAAA,SAAtB;AAAA;AAAA;AAAA;AAAA,WAA4B,KADV;AAAA;AAAA;AAAA;AAAA,WAEpB;AAAA,OAfC;AAAA;AAAA;AAAA;AAAA,SAgBL;AACJ;AACA,GAAG,WAAW,gCAAgC,OAAO,WAAY;AAC/D,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,WAAW;AAE5B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
